    // create 3 thread to send APack/ ALoad/ APick for rows in shipment
    /*
    pthread_t thread_pack;
      pthread_t thread_load;
      pthread_t thread_pickup;
      int rc1, rc2, rc3;
      //TO DO: create tread pick
      thread_pack_para pack_para;
      pack_para.id = std::string("pack");
      pack_para.C = para_send->C;
      pack_para.sockfd = para_send->sockfd;
      thread_load_para load_para;
      load_para.id = std::string("load");
      load_para.C = para_send->C;
      load_para.sockfd = para_send->sockfd;
      
      rc1 = pthread_create(&thread_pack, NULL, pack_thread_func, &pack_para);
      if (rc1){
	printf("ERROR; return code from pthread_create() is %d\n", rc1);
	exit(-1);
      }
      rc2 = pthread_create(&thread_load, NULL, load_thread_func, &load_para);
      if (rc2){
	printf("ERROR; return code from pthread_create() is %d\n", rc2);
	exit(-1);
      }
    */





  /* purchase more */ // change
  /*
  if(!send_APurchaseMore(whNum,  products, sockfd)){
    printf("send APurchaseMore failed\n");
  }
  */
  /* pack */ // change
  /*
  uint64_t shipId = 0;
  for(shipId = 1; shipId < 6; shipId++){
    if(!send_APack(whNum, shipId, pur, sockfd)){
      printf("send APack failed\n");
    }
  }
  */
  /* load */
  /*
  if(!send_APutOnTruck(sockfd, loads)){
      printf("send APutOnTruck failed\n");
  }
  */


void* pack_thread_func(void* para){
  thread_pack_para* para_pack = (thread_pack_para*)para;
  printf("It's me, thread %s!\n", (para_pack->id).c_str());
  int sid = 1;
  std::string status = std::string("pack0");
  while(true){
    // load shipment where sid = sid, status = pack0
    std::string sid_str;
    to_string(sid, sid_str);
    std::vector<std::unordered_map<std::string, std::string> >prods;
    uint32_t whnum;
    uint64_t shipid;
    bool ready = db_get_ship_topack(para_pack->C, sid_str, status, whnum, prods, shipid);
    if(ready == false){
      // continue;
      break;
    }
    // write Acommand

    // send message
    
    sid++;
  }
  pthread_exit(NULL);
}

void* load_thread_func(void* para){
  thread_load_para* para_load = (thread_load_para*)para;
  printf("It's me, thread %s!\n", (para_load->id).c_str());
  int sid = 1;
  while(true){
    sid++;
  }
  pthread_exit(NULL);
}
